
stm32f10ec8t6-udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000106c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011ac  080011ac  000111b4  2**0
                  CONTENTS
  4 .ARM          00000000  080011ac  080011ac  000111b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011ac  080011b4  000111b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011b0  080011b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  080011b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  080011b4  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000111dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000145a  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000531  00000000  00000000  0001267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00012bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00012ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002215  00000000  00000000  00012e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b81  00000000  00000000  00015053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008c02  00000000  00000000  00016bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000414  00000000  00000000  0001f7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0001fbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001184 	.word	0x08001184

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001184 	.word	0x08001184

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIOClockControl>:

/// @brief GPIO clock control
/// @param pGPIOx 
/// @param status 
void GPIOClockControl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
    if(status==ENABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d14c      	bne.n	800022c <GPIOClockControl+0xac>
    {
        if(pGPIOx == GPIOA)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a4f      	ldr	r2, [pc, #316]	; (80002d4 <GPIOClockControl+0x154>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIOClockControl+0x28>
        {
            GPIOA_CLOCK_EN();
 800019a:	4b4f      	ldr	r3, [pc, #316]	; (80002d8 <GPIOClockControl+0x158>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a4e      	ldr	r2, [pc, #312]	; (80002d8 <GPIOClockControl+0x158>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
        else if(pGPIOx == GPIOG)
        {
            GPIOG_CLOCK_DS();
        }
    }
}
 80001a6:	e090      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOB)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a4c      	ldr	r2, [pc, #304]	; (80002dc <GPIOClockControl+0x15c>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIOClockControl+0x3e>
            GPIOB_CLOCK_EN();
 80001b0:	4b49      	ldr	r3, [pc, #292]	; (80002d8 <GPIOClockControl+0x158>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a48      	ldr	r2, [pc, #288]	; (80002d8 <GPIOClockControl+0x158>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e085      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOC)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a47      	ldr	r2, [pc, #284]	; (80002e0 <GPIOClockControl+0x160>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIOClockControl+0x54>
            GPIOC_CLOCK_EN();
 80001c6:	4b44      	ldr	r3, [pc, #272]	; (80002d8 <GPIOClockControl+0x158>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a43      	ldr	r2, [pc, #268]	; (80002d8 <GPIOClockControl+0x158>)
 80001cc:	f043 0310 	orr.w	r3, r3, #16
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e07a      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOD)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a43      	ldr	r2, [pc, #268]	; (80002e4 <GPIOClockControl+0x164>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIOClockControl+0x6a>
            GPIOD_CLOCK_EN();
 80001dc:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <GPIOClockControl+0x158>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a3d      	ldr	r2, [pc, #244]	; (80002d8 <GPIOClockControl+0x158>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e06f      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOE)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a3e      	ldr	r2, [pc, #248]	; (80002e8 <GPIOClockControl+0x168>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIOClockControl+0x80>
            GPIOE_CLOCK_EN();
 80001f2:	4b39      	ldr	r3, [pc, #228]	; (80002d8 <GPIOClockControl+0x158>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a38      	ldr	r2, [pc, #224]	; (80002d8 <GPIOClockControl+0x158>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e064      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOF)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a3a      	ldr	r2, [pc, #232]	; (80002ec <GPIOClockControl+0x16c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIOClockControl+0x96>
            GPIOF_CLOCK_EN();
 8000208:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <GPIOClockControl+0x158>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a32      	ldr	r2, [pc, #200]	; (80002d8 <GPIOClockControl+0x158>)
 800020e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e059      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOG)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a35      	ldr	r2, [pc, #212]	; (80002f0 <GPIOClockControl+0x170>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d155      	bne.n	80002ca <GPIOClockControl+0x14a>
            GPIOG_CLOCK_EN();
 800021e:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <GPIOClockControl+0x158>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a2d      	ldr	r2, [pc, #180]	; (80002d8 <GPIOClockControl+0x158>)
 8000224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e04e      	b.n	80002ca <GPIOClockControl+0x14a>
    else if(status==DISABLE)
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <GPIOClockControl+0x14a>
        if(pGPIOx == GPIOA)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <GPIOClockControl+0x154>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIOClockControl+0xc8>
            GPIOA_CLOCK_DS();
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <GPIOClockControl+0x158>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <GPIOClockControl+0x158>)
 8000240:	f023 0304 	bic.w	r3, r3, #4
 8000244:	6193      	str	r3, [r2, #24]
}
 8000246:	e040      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOB)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a24      	ldr	r2, [pc, #144]	; (80002dc <GPIOClockControl+0x15c>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIOClockControl+0xde>
            GPIOB_CLOCK_DS();
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <GPIOClockControl+0x158>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <GPIOClockControl+0x158>)
 8000256:	f023 0308 	bic.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
}
 800025c:	e035      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOC)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a1f      	ldr	r2, [pc, #124]	; (80002e0 <GPIOClockControl+0x160>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIOClockControl+0xf4>
            GPIOC_CLOCK_DS();
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <GPIOClockControl+0x158>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <GPIOClockControl+0x158>)
 800026c:	f023 0310 	bic.w	r3, r3, #16
 8000270:	6193      	str	r3, [r2, #24]
}
 8000272:	e02a      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOD)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a1b      	ldr	r2, [pc, #108]	; (80002e4 <GPIOClockControl+0x164>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIOClockControl+0x10a>
            GPIOD_CLOCK_DS();
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <GPIOClockControl+0x158>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a15      	ldr	r2, [pc, #84]	; (80002d8 <GPIOClockControl+0x158>)
 8000282:	f023 0320 	bic.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]
}
 8000288:	e01f      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOE)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <GPIOClockControl+0x168>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIOClockControl+0x120>
            GPIOE_CLOCK_DS();
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <GPIOClockControl+0x158>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <GPIOClockControl+0x158>)
 8000298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800029c:	6193      	str	r3, [r2, #24]
}
 800029e:	e014      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOF)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <GPIOClockControl+0x16c>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIOClockControl+0x136>
            GPIOF_CLOCK_DS();
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <GPIOClockControl+0x158>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <GPIOClockControl+0x158>)
 80002ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002b2:	6193      	str	r3, [r2, #24]
}
 80002b4:	e009      	b.n	80002ca <GPIOClockControl+0x14a>
        else if(pGPIOx == GPIOG)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <GPIOClockControl+0x170>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d105      	bne.n	80002ca <GPIOClockControl+0x14a>
            GPIOG_CLOCK_DS();
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <GPIOClockControl+0x158>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <GPIOClockControl+0x158>)
 80002c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002c8:	6193      	str	r3, [r2, #24]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	40011000 	.word	0x40011000
 80002e4:	40011400 	.word	0x40011400
 80002e8:	40011800 	.word	0x40011800
 80002ec:	40011c00 	.word	0x40011c00
 80002f0:	40012000 	.word	0x40012000

080002f4 <GPIOInit>:
/// @brief GPIO initialization
/// @param pGPIOx 
/// @param mode 
/// @param speed 
void GPIOInit(GPIO_Handler_t *GPIO_conf)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b089      	sub	sp, #36	; 0x24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
   
    if (GPIO_conf->GPIO_PinCOnfig.PinMode == output_push_pull)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d14a      	bne.n	800039a <GPIOInit+0xa6>
    {
   

        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	2b07      	cmp	r3, #7
 800030a:	d920      	bls.n	800034e <GPIOInit+0x5a>
        {
            // set GIO mode CONF
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	3b1e      	subs	r3, #30
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	43db      	mvns	r3, r3
 8000322:	4619      	mov	r1, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	400a      	ands	r2, r1
 800032a:	605a      	str	r2, [r3, #4]
            
            // set gpio speed MODE
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	685a      	ldr	r2, [r3, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	791b      	ldrb	r3, [r3, #4]
 8000336:	3b08      	subs	r3, #8
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	4619      	mov	r1, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	430a      	orrs	r2, r1
 8000348:	605a      	str	r2, [r3, #4]
        }

    }

    
}
 800034a:	f000 bc1e 	b.w	8000b8a <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	2b07      	cmp	r3, #7
 8000354:	f200 8419 	bhi.w	8000b8a <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	3302      	adds	r3, #2
 8000366:	2101      	movs	r1, #1
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	43db      	mvns	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	400a      	ands	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	799b      	ldrb	r3, [r3, #6]
 8000382:	4619      	mov	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	4619      	mov	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	430a      	orrs	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
}
 8000398:	e3f7      	b.n	8000b8a <GPIOInit+0x896>
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == output_open_drain)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	795b      	ldrb	r3, [r3, #5]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d14c      	bne.n	800043c <GPIOInit+0x148>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	2b07      	cmp	r3, #7
 80003a8:	d921      	bls.n	80003ee <GPIOInit+0xfa>
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE-2));
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	3b08      	subs	r3, #8
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	3b02      	subs	r3, #2
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	4619      	mov	r1, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	430a      	orrs	r2, r1
 80003c8:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	799b      	ldrb	r3, [r3, #6]
 80003d4:	4619      	mov	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	3b08      	subs	r3, #8
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	4619      	mov	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	605a      	str	r2, [r3, #4]
}
 80003ec:	e3cd      	b.n	8000b8a <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	2b07      	cmp	r3, #7
 80003f4:	f200 83c9 	bhi.w	8000b8a <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinMode<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	795b      	ldrb	r3, [r3, #5]
 8000402:	4619      	mov	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	3302      	adds	r3, #2
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	4619      	mov	r1, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	799b      	ldrb	r3, [r3, #6]
 8000424:	4619      	mov	r1, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	4619      	mov	r1, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	e3a6      	b.n	8000b8a <GPIOInit+0x896>
    else if(GPIO_conf->GPIO_PinCOnfig.PinMode == input_floating || GPIO_conf->GPIO_PinCOnfig.PinMode == input_pullup_pull_down)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d003      	beq.n	800044c <GPIOInit+0x158>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795b      	ldrb	r3, [r3, #5]
 8000448:	2b06      	cmp	r3, #6
 800044a:	d14b      	bne.n	80004e4 <GPIOInit+0x1f0>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	2b07      	cmp	r3, #7
 8000452:	d922      	bls.n	800049a <GPIOInit+0x1a6>
            GPIO_conf->pGPIOx->GPIO_CRH |= (GPIO_conf->GPIO_PinCOnfig.PinMode<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE-2));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	795b      	ldrb	r3, [r3, #5]
 800045e:	4619      	mov	r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	3b08      	subs	r3, #8
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	3b02      	subs	r3, #2
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	430a      	orrs	r2, r1
 8000476:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	3b08      	subs	r3, #8
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	400a      	ands	r2, r1
 8000496:	605a      	str	r2, [r3, #4]
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000498:	e376      	b.n	8000b88 <GPIOInit+0x894>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	2b07      	cmp	r3, #7
 80004a0:	f200 8372 	bhi.w	8000b88 <GPIOInit+0x894>
        	GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<2);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f022 0204 	bic.w	r2, r2, #4
 80004b2:	601a      	str	r2, [r3, #0]
        	GPIO_conf->pGPIOx->GPIO_CRL |=  (2<<2);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f042 0208 	orr.w	r2, r2, #8
 80004c2:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	4619      	mov	r1, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	400a      	ands	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 80004e2:	e351      	b.n	8000b88 <GPIOInit+0x894>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_FT)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	f040 80c8 	bne.w	800067e <GPIOInit+0x38a>
        EXTI->exti_FTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80004ee:	4ba6      	ldr	r3, [pc, #664]	; (8000788 <GPIOInit+0x494>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	4aa2      	ldr	r2, [pc, #648]	; (8000788 <GPIOInit+0x494>)
 8000500:	430b      	orrs	r3, r1
 8000502:	60d3      	str	r3, [r2, #12]
        EXTI->exti_RTSR &= ~(1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000504:	4ba0      	ldr	r3, [pc, #640]	; (8000788 <GPIOInit+0x494>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	7912      	ldrb	r2, [r2, #4]
 800050c:	4611      	mov	r1, r2
 800050e:	2201      	movs	r2, #1
 8000510:	408a      	lsls	r2, r1
 8000512:	43d2      	mvns	r2, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a9c      	ldr	r2, [pc, #624]	; (8000788 <GPIOInit+0x494>)
 8000518:	400b      	ands	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 800051c:	4b9a      	ldr	r3, [pc, #616]	; (8000788 <GPIOInit+0x494>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	4611      	mov	r1, r2
 800052c:	4a96      	ldr	r2, [pc, #600]	; (8000788 <GPIOInit+0x494>)
 800052e:	430b      	orrs	r3, r1
 8000530:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	60fb      	str	r3, [r7, #12]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	f003 0303 	and.w	r3, r3, #3
 8000544:	60bb      	str	r3, [r7, #8]
        if(GPIO_conf->pGPIOx == GPIOA)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a90      	ldr	r2, [pc, #576]	; (800078c <GPIOInit+0x498>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d111      	bne.n	8000574 <GPIOInit+0x280>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 8000550:	4a8f      	ldr	r2, [pc, #572]	; (8000790 <GPIOInit+0x49c>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3302      	adds	r3, #2
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	498a      	ldr	r1, [pc, #552]	; (8000790 <GPIOInit+0x49c>)
 8000568:	401a      	ands	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3302      	adds	r3, #2
 800056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000572:	e30a      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a86      	ldr	r2, [pc, #536]	; (8000794 <GPIOInit+0x4a0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d110      	bne.n	80005a0 <GPIOInit+0x2ac>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2);
 800057e:	4a84      	ldr	r2, [pc, #528]	; (8000790 <GPIOInit+0x49c>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3302      	adds	r3, #2
 8000584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	497f      	ldr	r1, [pc, #508]	; (8000790 <GPIOInit+0x49c>)
 8000594:	431a      	orrs	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3302      	adds	r3, #2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800059e:	e2f4      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a7c      	ldr	r2, [pc, #496]	; (8000798 <GPIOInit+0x4a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d110      	bne.n	80005cc <GPIOInit+0x2d8>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 80005aa:	4a79      	ldr	r2, [pc, #484]	; (8000790 <GPIOInit+0x49c>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3302      	adds	r3, #2
 80005b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	2102      	movs	r1, #2
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4974      	ldr	r1, [pc, #464]	; (8000790 <GPIOInit+0x49c>)
 80005c0:	431a      	orrs	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3302      	adds	r3, #2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005ca:	e2de      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOD)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a72      	ldr	r2, [pc, #456]	; (800079c <GPIOInit+0x4a8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d110      	bne.n	80005f8 <GPIOInit+0x304>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 80005d6:	4a6e      	ldr	r2, [pc, #440]	; (8000790 <GPIOInit+0x49c>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3302      	adds	r3, #2
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	2103      	movs	r1, #3
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	4969      	ldr	r1, [pc, #420]	; (8000790 <GPIOInit+0x49c>)
 80005ec:	431a      	orrs	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3302      	adds	r3, #2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005f6:	e2c8      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a68      	ldr	r2, [pc, #416]	; (80007a0 <GPIOInit+0x4ac>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d110      	bne.n	8000624 <GPIOInit+0x330>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 8000602:	4a63      	ldr	r2, [pc, #396]	; (8000790 <GPIOInit+0x49c>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3302      	adds	r3, #2
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	2104      	movs	r1, #4
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	495e      	ldr	r1, [pc, #376]	; (8000790 <GPIOInit+0x49c>)
 8000618:	431a      	orrs	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3302      	adds	r3, #2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000622:	e2b2      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a5e      	ldr	r2, [pc, #376]	; (80007a4 <GPIOInit+0x4b0>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d110      	bne.n	8000650 <GPIOInit+0x35c>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <GPIOInit+0x49c>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3302      	adds	r3, #2
 8000634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	0092      	lsls	r2, r2, #2
 800063c:	2105      	movs	r1, #5
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4953      	ldr	r1, [pc, #332]	; (8000790 <GPIOInit+0x49c>)
 8000644:	431a      	orrs	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3302      	adds	r3, #2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	e29c      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a54      	ldr	r2, [pc, #336]	; (80007a8 <GPIOInit+0x4b4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	f040 8297 	bne.w	8000b8a <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 800065c:	4a4c      	ldr	r2, [pc, #304]	; (8000790 <GPIOInit+0x49c>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3302      	adds	r3, #2
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	2106      	movs	r1, #6
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	4947      	ldr	r1, [pc, #284]	; (8000790 <GPIOInit+0x49c>)
 8000672:	431a      	orrs	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3302      	adds	r3, #2
 8000678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067c:	e285      	b.n	8000b8a <GPIOInit+0x896>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_RT)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	2b08      	cmp	r3, #8
 8000684:	f040 80eb 	bne.w	800085e <GPIOInit+0x56a>
        GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	3b08      	subs	r3, #8
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	2101      	movs	r1, #1
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	605a      	str	r2, [r3, #4]
        EXTI->exti_RTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006a8:	4b37      	ldr	r3, [pc, #220]	; (8000788 <GPIOInit+0x494>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a33      	ldr	r2, [pc, #204]	; (8000788 <GPIOInit+0x494>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
        EXTI->exti_FTSR &= ~(1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006be:	4b32      	ldr	r3, [pc, #200]	; (8000788 <GPIOInit+0x494>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <GPIOInit+0x494>)
 80006d2:	400b      	ands	r3, r1
 80006d4:	60d3      	str	r3, [r2, #12]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <GPIOInit+0x494>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7912      	ldrb	r2, [r2, #4]
 80006de:	4611      	mov	r1, r2
 80006e0:	2201      	movs	r2, #1
 80006e2:	408a      	lsls	r2, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <GPIOInit+0x494>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	089b      	lsrs	r3, r3, #2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	617b      	str	r3, [r7, #20]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
        if(GPIO_conf->pGPIOx == GPIOA)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <GPIOInit+0x498>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d111      	bne.n	800072e <GPIOInit+0x43a>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <GPIOInit+0x49c>)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3302      	adds	r3, #2
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	2101      	movs	r1, #1
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	43d2      	mvns	r2, r2
 8000720:	491b      	ldr	r1, [pc, #108]	; (8000790 <GPIOInit+0x49c>)
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3302      	adds	r3, #2
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800072c:	e22d      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <GPIOInit+0x4a0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d110      	bne.n	800075a <GPIOInit+0x466>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2); 
 8000738:	4a15      	ldr	r2, [pc, #84]	; (8000790 <GPIOInit+0x49c>)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3302      	adds	r3, #2
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	4910      	ldr	r1, [pc, #64]	; (8000790 <GPIOInit+0x49c>)
 800074e:	431a      	orrs	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3302      	adds	r3, #2
 8000754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000758:	e217      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <GPIOInit+0x4a4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d123      	bne.n	80007ac <GPIOInit+0x4b8>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <GPIOInit+0x49c>)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3302      	adds	r3, #2
 800076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	0092      	lsls	r2, r2, #2
 8000772:	2102      	movs	r1, #2
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4905      	ldr	r1, [pc, #20]	; (8000790 <GPIOInit+0x49c>)
 800077a:	431a      	orrs	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3302      	adds	r3, #2
 8000780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000784:	e201      	b.n	8000b8a <GPIOInit+0x896>
 8000786:	bf00      	nop
 8000788:	40010400 	.word	0x40010400
 800078c:	40010800 	.word	0x40010800
 8000790:	40010000 	.word	0x40010000
 8000794:	40010c00 	.word	0x40010c00
 8000798:	40011000 	.word	0x40011000
 800079c:	40011400 	.word	0x40011400
 80007a0:	40011800 	.word	0x40011800
 80007a4:	40011c00 	.word	0x40011c00
 80007a8:	40012000 	.word	0x40012000
        else if(GPIO_conf->pGPIOx == GPIOD)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a91      	ldr	r2, [pc, #580]	; (80009f8 <GPIOInit+0x704>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d110      	bne.n	80007d8 <GPIOInit+0x4e4>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 80007b6:	4a91      	ldr	r2, [pc, #580]	; (80009fc <GPIOInit+0x708>)
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3302      	adds	r3, #2
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	2103      	movs	r1, #3
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	498c      	ldr	r1, [pc, #560]	; (80009fc <GPIOInit+0x708>)
 80007cc:	431a      	orrs	r2, r3
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3302      	adds	r3, #2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d6:	e1d8      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a88      	ldr	r2, [pc, #544]	; (8000a00 <GPIOInit+0x70c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d110      	bne.n	8000804 <GPIOInit+0x510>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 80007e2:	4a86      	ldr	r2, [pc, #536]	; (80009fc <GPIOInit+0x708>)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3302      	adds	r3, #2
 80007e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	2104      	movs	r1, #4
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4981      	ldr	r1, [pc, #516]	; (80009fc <GPIOInit+0x708>)
 80007f8:	431a      	orrs	r2, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3302      	adds	r3, #2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000802:	e1c2      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a7e      	ldr	r2, [pc, #504]	; (8000a04 <GPIOInit+0x710>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d110      	bne.n	8000830 <GPIOInit+0x53c>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 800080e:	4a7b      	ldr	r2, [pc, #492]	; (80009fc <GPIOInit+0x708>)
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3302      	adds	r3, #2
 8000814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	2105      	movs	r1, #5
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	4976      	ldr	r1, [pc, #472]	; (80009fc <GPIOInit+0x708>)
 8000824:	431a      	orrs	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3302      	adds	r3, #2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800082e:	e1ac      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a74      	ldr	r2, [pc, #464]	; (8000a08 <GPIOInit+0x714>)
 8000836:	4293      	cmp	r3, r2
 8000838:	f040 81a7 	bne.w	8000b8a <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 800083c:	4a6f      	ldr	r2, [pc, #444]	; (80009fc <GPIOInit+0x708>)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3302      	adds	r3, #2
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	2106      	movs	r1, #6
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	496a      	ldr	r1, [pc, #424]	; (80009fc <GPIOInit+0x708>)
 8000852:	431a      	orrs	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3302      	adds	r3, #2
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800085c:	e195      	b.n	8000b8a <GPIOInit+0x896>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_RFT)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	795b      	ldrb	r3, [r3, #5]
 8000862:	2b08      	cmp	r3, #8
 8000864:	f040 80da 	bne.w	8000a1c <GPIOInit+0x728>
        EXTI->exti_RTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000868:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <GPIOInit+0x718>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	7912      	ldrb	r2, [r2, #4]
 8000870:	4611      	mov	r1, r2
 8000872:	2201      	movs	r2, #1
 8000874:	408a      	lsls	r2, r1
 8000876:	4611      	mov	r1, r2
 8000878:	4a64      	ldr	r2, [pc, #400]	; (8000a0c <GPIOInit+0x718>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6093      	str	r3, [r2, #8]
        EXTI->exti_FTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 800087e:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <GPIOInit+0x718>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	7912      	ldrb	r2, [r2, #4]
 8000886:	4611      	mov	r1, r2
 8000888:	2201      	movs	r2, #1
 800088a:	408a      	lsls	r2, r1
 800088c:	4611      	mov	r1, r2
 800088e:	4a5f      	ldr	r2, [pc, #380]	; (8000a0c <GPIOInit+0x718>)
 8000890:	430b      	orrs	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000894:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <GPIOInit+0x718>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	7912      	ldrb	r2, [r2, #4]
 800089c:	4611      	mov	r1, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	408a      	lsls	r2, r1
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a59      	ldr	r2, [pc, #356]	; (8000a0c <GPIOInit+0x718>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	61fb      	str	r3, [r7, #28]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	61bb      	str	r3, [r7, #24]
        if(GPIO_conf->pGPIOx == GPIOA)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <GPIOInit+0x71c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d111      	bne.n	80008ec <GPIOInit+0x5f8>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 80008c8:	4a4c      	ldr	r2, [pc, #304]	; (80009fc <GPIOInit+0x708>)
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3302      	adds	r3, #2
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	43d2      	mvns	r2, r2
 80008de:	4947      	ldr	r1, [pc, #284]	; (80009fc <GPIOInit+0x708>)
 80008e0:	401a      	ands	r2, r3
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3302      	adds	r3, #2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ea:	e14e      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <GPIOInit+0x720>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d110      	bne.n	8000918 <GPIOInit+0x624>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2);
 80008f6:	4a41      	ldr	r2, [pc, #260]	; (80009fc <GPIOInit+0x708>)
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	3302      	adds	r3, #2
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	493c      	ldr	r1, [pc, #240]	; (80009fc <GPIOInit+0x708>)
 800090c:	431a      	orrs	r2, r3
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3302      	adds	r3, #2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000916:	e138      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a3e      	ldr	r2, [pc, #248]	; (8000a18 <GPIOInit+0x724>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d110      	bne.n	8000944 <GPIOInit+0x650>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <GPIOInit+0x708>)
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	3302      	adds	r3, #2
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	2102      	movs	r1, #2
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	4931      	ldr	r1, [pc, #196]	; (80009fc <GPIOInit+0x708>)
 8000938:	431a      	orrs	r2, r3
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3302      	adds	r3, #2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000942:	e122      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOD)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <GPIOInit+0x704>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d110      	bne.n	8000970 <GPIOInit+0x67c>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <GPIOInit+0x708>)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3302      	adds	r3, #2
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	2103      	movs	r1, #3
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4926      	ldr	r1, [pc, #152]	; (80009fc <GPIOInit+0x708>)
 8000964:	431a      	orrs	r2, r3
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3302      	adds	r3, #2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800096e:	e10c      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <GPIOInit+0x70c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d110      	bne.n	800099c <GPIOInit+0x6a8>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <GPIOInit+0x708>)
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	3302      	adds	r3, #2
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	2104      	movs	r1, #4
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	491b      	ldr	r1, [pc, #108]	; (80009fc <GPIOInit+0x708>)
 8000990:	431a      	orrs	r2, r3
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3302      	adds	r3, #2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800099a:	e0f6      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <GPIOInit+0x710>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d110      	bne.n	80009c8 <GPIOInit+0x6d4>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <GPIOInit+0x708>)
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	3302      	adds	r3, #2
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	2105      	movs	r1, #5
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	4910      	ldr	r1, [pc, #64]	; (80009fc <GPIOInit+0x708>)
 80009bc:	431a      	orrs	r2, r3
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3302      	adds	r3, #2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009c6:	e0e0      	b.n	8000b8a <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <GPIOInit+0x714>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 80db 	bne.w	8000b8a <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <GPIOInit+0x708>)
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	2106      	movs	r1, #6
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <GPIOInit+0x708>)
 80009ea:	431a      	orrs	r2, r3
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3302      	adds	r3, #2
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009f4:	e0c9      	b.n	8000b8a <GPIOInit+0x896>
 80009f6:	bf00      	nop
 80009f8:	40011400 	.word	0x40011400
 80009fc:	40010000 	.word	0x40010000
 8000a00:	40011800 	.word	0x40011800
 8000a04:	40011c00 	.word	0x40011c00
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40011000 	.word	0x40011000
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == alternate_push_pull)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d166      	bne.n	8000af2 <GPIOInit+0x7fe>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d92e      	bls.n	8000a8a <GPIOInit+0x796>
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	3b1e      	subs	r3, #30
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	400a      	ands	r2, r1
 8000a4a:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (2<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	791b      	ldrb	r3, [r3, #4]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	3b1e      	subs	r3, #30
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	3b08      	subs	r3, #8
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	2101      	movs	r1, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	605a      	str	r2, [r3, #4]
}
 8000a88:	e07f      	b.n	8000b8a <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d87b      	bhi.n	8000b8a <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	400a      	ands	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (2<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	3302      	adds	r3, #2
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	e04b      	b.n	8000b8a <GPIOInit+0x896>
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == alternate_open_drain)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	795b      	ldrb	r3, [r3, #5]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d147      	bne.n	8000b8a <GPIOInit+0x896>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d91e      	bls.n	8000b40 <GPIOInit+0x84c>
            GPIO_conf->pGPIOx->GPIO_CRH |= (3<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	3b1e      	subs	r3, #30
 8000b10:	2103      	movs	r1, #3
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	3b08      	subs	r3, #8
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	605a      	str	r2, [r3, #4]
}
 8000b3e:	e024      	b.n	8000b8a <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	2b07      	cmp	r3, #7
 8000b46:	d820      	bhi.n	8000b8a <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL |= (3<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	799b      	ldrb	r3, [r3, #6]
 8000b70:	4619      	mov	r1, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	791b      	ldrb	r3, [r3, #4]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	e000      	b.n	8000b8a <GPIOInit+0x896>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000b88:	bf00      	nop
}
 8000b8a:	bf00      	nop
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <GPIOToggle>:

/// @brief Toggle pin
/// @param pGPIOx 
/// @param pin 
void GPIOToggle(GPIO_RegDef_t *pGPIOx, uint8_t pin)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
    pGPIOx->GPIO_ODR ^= (1<<pin);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	78fa      	ldrb	r2, [r7, #3]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	405a      	eors	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60da      	str	r2, [r3, #12]

}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <GPIO_IRQHandler>:


/// @brief 
/// @param PinNumber 
void GPIO_IRQHandler(uint8_t PinNumber)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]

    // clear the pr register
    if(EXTI->exti_PR & (1<<PinNumber))
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <GPIO_IRQHandler+0x3c>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <GPIO_IRQHandler+0x30>
    {
        EXTI->exti_PR |= (1<<PinNumber);
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <GPIO_IRQHandler+0x3c>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <GPIO_IRQHandler+0x3c>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6153      	str	r3, [r2, #20]
    }

}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40010400 	.word	0x40010400

08000bfc <SPI_ClockControl>:
static void spi_tx_it_handle(SPI_Handle_t *pSPIHandle);
static void spi_rx_it_handle(SPI_Handle_t *pSPIHandle);


void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t status)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
    if(status == ENABLE)
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d106      	bne.n	8000c1c <SPI_ClockControl+0x20>
    {
        SPI1_CLOCK_EN();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <SPI_ClockControl+0x38>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <SPI_ClockControl+0x38>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c18:	6193      	str	r3, [r2, #24]
    else
    {
        SPI1_CLOCK_DS();
    }

}
 8000c1a:	e005      	b.n	8000c28 <SPI_ClockControl+0x2c>
        SPI1_CLOCK_DS();
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SPI_ClockControl+0x38>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <SPI_ClockControl+0x38>)
 8000c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c26:	6193      	str	r3, [r2, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <SPI_Enable>:


void SPI_Enable(SPI_RegDef_t *pSPIx, uint8_t en_ds)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
    if(en_ds==ENABLE)
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d106      	bne.n	8000c58 <SPI_Enable+0x20>
    {
        // set the SPI enable
        pSPIx->SPI_CR1 |= (1<<6);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
    else
    {
        // set the SPI enable
        pSPIx->SPI_CR1 &= ~(1<<6);
    }
}
 8000c56:	e005      	b.n	8000c64 <SPI_Enable+0x2c>
        pSPIx->SPI_CR1 &= ~(1<<6);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]

    // set the CPHA
   if(pSPIHandle->SPIConfig.SPI_CPHA == 1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7a5b      	ldrb	r3, [r3, #9]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d108      	bne.n	8000c92 <SPI_Init+0x24>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<0);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0201 	orr.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e007      	b.n	8000ca2 <SPI_Init+0x34>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<0);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
   }


   // set the CPOL
   if(pSPIHandle->SPIConfig.SPI_CPOL == 1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7a1b      	ldrb	r3, [r3, #8]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d108      	bne.n	8000cbe <SPI_Init+0x50>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0202 	orr.w	r2, r2, #2
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e007      	b.n	8000cce <SPI_Init+0x60>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0202 	bic.w	r2, r2, #2
 8000ccc:	601a      	str	r2, [r3, #0]
   }


    // Device mode
   if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MASTER)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <SPI_Init+0x7c>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<2);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0204 	orr.w	r2, r2, #4
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <SPI_Init+0x8c>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<2);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0204 	bic.w	r2, r2, #4
 8000cf8:	601a      	str	r2, [r3, #0]
   }



    // set the spi clock
    pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_CLKSpeed<<3);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	799b      	ldrb	r3, [r3, #6]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	00d9      	lsls	r1, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]


    // set software slave management

    if(pSPIHandle->SPIConfig.SSM == ENABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a9b      	ldrb	r3, [r3, #10]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <SPI_Init+0xbe>
    {
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<9);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <SPI_Init+0xce>
    }


    else
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<9);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d3a:	601a      	str	r2, [r3, #0]
    }
    
    

    // set data frame format
    if(pSPIHandle->SPIConfig.SPI_DFF == SPI_DFF_16_BIT)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	79db      	ldrb	r3, [r3, #7]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <SPI_Init+0xea>
    {
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<11);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e007      	b.n	8000d68 <SPI_Init+0xfa>
    }

    else
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<11);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d66:	601a      	str	r2, [r3, #0]
    }


    // set the spi bus mode
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_FULLDUBLEX)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d108      	bne.n	8000d84 <SPI_Init+0x116>
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<15);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d80:	601a      	str	r2, [r3, #0]
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
    }

    
    
}
 8000d82:	e01a      	b.n	8000dba <SPI_Init+0x14c>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_HALFDUPLEX)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <SPI_Init+0x132>
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	e00c      	b.n	8000dba <SPI_Init+0x14c>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_SIMPLEX)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d107      	bne.n	8000dba <SPI_Init+0x14c>
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <SPI_SendDataIt>:
/// @brief 
/// @param pSPIHandle 
/// @param Tx_data_buffer 
/// @param data_len 
SPI_IT_STATUS SPI_SendDataIt(SPI_Handle_t *pSPIHandle, uint8_t *Tx_data_buffer, uint32_t data_len)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]

    if(pSPIHandle->TxState != SPI_BUSSY_TX)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d010      	beq.n	8000dfa <SPI_SendDataIt+0x36>
    {
        // Save the tx buffer
        pSPIHandle->pTxBuffer = Tx_data_buffer;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen = data_len;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	615a      	str	r2, [r3, #20]

        // Mark the spi TX as bussy
        pSPIHandle->TxState = SPI_BUSSY_TX;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2202      	movs	r2, #2
 8000de8:	771a      	strb	r2, [r3, #28]

        // enable the TXIE
        pSPIHandle->pSPIx->SPI_CR2 |= (1<<7);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df8:	605a      	str	r2, [r3, #4]
    }
    
    return pSPIHandle->TxState;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	7f1b      	ldrb	r3, [r3, #28]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <spi_tx_it_handle>:
}



static void spi_tx_it_handle(SPI_Handle_t *pSPIHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

    
    // check the frame format
    if(pSPIHandle->pSPIx->SPI_CR1 & (1<<11))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d015      	beq.n	8000e4a <spi_tx_it_handle+0x42>
    {
        // send two bytes to the data register
        pSPIHandle->pSPIx->SPI_DR = *((uint16_t *) pSPIHandle->pTxBuffer);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60da      	str	r2, [r3, #12]

        pSPIHandle->TxLen--;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	615a      	str	r2, [r3, #20]

        pSPIHandle->TxLen--;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	615a      	str	r2, [r3, #20]

        (uint16_t *)pSPIHandle->pTxBuffer++; // increment the buffer address
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	e00f      	b.n	8000e6a <spi_tx_it_handle+0x62>
    }

    else
    {
        // send 1 byte to the data register
        pSPIHandle->pSPIx->SPI_DR = *pSPIHandle->pTxBuffer;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60da      	str	r2, [r3, #12]

        pSPIHandle->TxLen--;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	615a      	str	r2, [r3, #20]

        pSPIHandle->pTxBuffer++;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60da      	str	r2, [r3, #12]
    }
    
    // ! الكود ده مجعبص
    if(pSPIHandle->TxLen==0)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d111      	bne.n	8000e96 <spi_tx_it_handle+0x8e>
    {
        pSPIHandle->pSPIx->SPI_CR2 &= ~(1<<7);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e80:	605a      	str	r2, [r3, #4]
        pSPIHandle->pTxBuffer = NULL;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxState = SPI_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	771a      	strb	r2, [r3, #28]
        spi_ApplicationEventCallback(pSPIHandle,SPI_CMPLT_TX); //    جعبصة  
 8000e8e:	2103      	movs	r1, #3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f91d 	bl	80010d0 <spi_ApplicationEventCallback>
    }

}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <spi_rx_it_handle>:


static void spi_rx_it_handle(SPI_Handle_t *pSPIHandle)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
    // check the frame format
    if(pSPIHandle->pSPIx->SPI_CR1 & (1<<11))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d016      	beq.n	8000ee2 <spi_rx_it_handle+0x44>
    {
        // recive two bytes to the data register
        *((uint16_t *) pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->SPI_DR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	801a      	strh	r2, [r3, #0]

        pSPIHandle->RxLen--;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]

        pSPIHandle->RxLen--;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]

        (uint16_t *)pSPIHandle->pRxBuffer++; // increment the buffer address
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	e010      	b.n	8000f04 <spi_rx_it_handle+0x66>
    }

    else
    {
        // receive 1 byte to the data register
        *pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->SPI_DR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]

        pSPIHandle->RxLen--;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]

        pSPIHandle->pRxBuffer++;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
    }

    
    // Disable the Rx interrupt
    if(pSPIHandle->RxLen==0)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d111      	bne.n	8000f30 <spi_rx_it_handle+0x92>
    {
        pSPIHandle->pSPIx->SPI_CR2 &= ~(1<<6);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1a:	605a      	str	r2, [r3, #4]
        pSPIHandle->pRxBuffer = NULL;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
        pSPIHandle->RxState = SPI_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	775a      	strb	r2, [r3, #29]
        spi_ApplicationEventCallback(pSPIHandle,SPI_CMPLT_RX);
 8000f28:	2104      	movs	r1, #4
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f8d0 	bl	80010d0 <spi_ApplicationEventCallback>
    }
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SPI1_IRQHandler>:



void SPI1_IRQHandler(SPI_Handle_t *pSPIHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	// check if tx

	if((pSPIHandle->pSPIx->SPI_SR & (1<<1)) && (pSPIHandle->pSPIx->SPI_CR2 & (1<<7)))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00a      	beq.n	8000f64 <SPI1_IRQHandler+0x2c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <SPI1_IRQHandler+0x2c>
	{
		spi_tx_it_handle(pSPIHandle);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff53 	bl	8000e08 <spi_tx_it_handle>
		spi_rx_it_handle(pSPIHandle);
	}

	// check if error

}
 8000f62:	e010      	b.n	8000f86 <SPI1_IRQHandler+0x4e>
	else if((pSPIHandle->pSPIx->SPI_SR & (1<<0)) && (pSPIHandle->pSPIx->SPI_CR2 & (1<<6)))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <SPI1_IRQHandler+0x4e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <SPI1_IRQHandler+0x4e>
		spi_rx_it_handle(pSPIHandle);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff8c 	bl	8000e9e <spi_rx_it_handle>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <GPIOC_Init>:
GPIO_Handler_t SPIPIN_conf;



void GPIOC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

	
	// enable portc clock
	GPIOClockControl(AFIO,ENABLE);
 8000f94:	2101      	movs	r1, #1
 8000f96:	4823      	ldr	r0, [pc, #140]	; (8001024 <GPIOC_Init+0x94>)
 8000f98:	f7ff f8f2 	bl	8000180 <GPIOClockControl>
	GPIOClockControl(GPIOA,ENABLE);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <GPIOC_Init+0x98>)
 8000fa0:	f7ff f8ee 	bl	8000180 <GPIOClockControl>
	SPI_ClockControl(SPI1,ENABLE);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <GPIOC_Init+0x9c>)
 8000fa8:	f7ff fe28 	bl	8000bfc <SPI_ClockControl>

	// set SCK
	SPIPIN_conf.GPIO_PinCOnfig.PinNumber = 5;
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <GPIOC_Init+0xa0>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	711a      	strb	r2, [r3, #4]
	SPIPIN_conf.GPIO_PinCOnfig.PinMode = alternate_push_pull;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <GPIOC_Init+0xa0>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	715a      	strb	r2, [r3, #5]
	SPIPIN_conf.GPIO_PinCOnfig.PinSpeed = MHz_50;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <GPIOC_Init+0xa0>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	719a      	strb	r2, [r3, #6]
	SPIPIN_conf.pGPIOx = GPIOA;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <GPIOC_Init+0xa0>)
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <GPIOC_Init+0x98>)
 8000fc2:	601a      	str	r2, [r3, #0]
	GPIOInit(&SPIPIN_conf);
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <GPIOC_Init+0xa0>)
 8000fc6:	f7ff f995 	bl	80002f4 <GPIOInit>


	// set MOSI
	SPIPIN_conf.GPIO_PinCOnfig.PinNumber = 7;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <GPIOC_Init+0xa0>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	711a      	strb	r2, [r3, #4]
	SPIPIN_conf.GPIO_PinCOnfig.PinMode = alternate_push_pull;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <GPIOC_Init+0xa0>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	715a      	strb	r2, [r3, #5]
	SPIPIN_conf.GPIO_PinCOnfig.PinSpeed = MHz_50;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <GPIOC_Init+0xa0>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	719a      	strb	r2, [r3, #6]
	SPIPIN_conf.pGPIOx = GPIOA;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <GPIOC_Init+0xa0>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <GPIOC_Init+0x98>)
 8000fe0:	601a      	str	r2, [r3, #0]
	GPIOInit(&SPIPIN_conf);
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <GPIOC_Init+0xa0>)
 8000fe4:	f7ff f986 	bl	80002f4 <GPIOInit>



	SPI1_conf.SPIConfig.SPI_DeviceMode 		=  SPI_MASTER;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <GPIOC_Init+0xa4>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	711a      	strb	r2, [r3, #4]
	SPI1_conf.SPIConfig.SPI_CPHA  			=  0;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <GPIOC_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	725a      	strb	r2, [r3, #9]
	SPI1_conf.SPIConfig.SPI_CPOL  			=  0;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <GPIOC_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	721a      	strb	r2, [r3, #8]
	SPI1_conf.SPIConfig.SPI_DFF   			=  SPI_DFF_8_BIT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <GPIOC_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	71da      	strb	r2, [r3, #7]
	SPI1_conf.SPIConfig.SSM       			=  DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <GPIOC_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	729a      	strb	r2, [r3, #10]
	SPI1_conf.SPIConfig.SPI_BusConfig       =  SPI_FULLDUBLEX;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <GPIOC_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	715a      	strb	r2, [r3, #5]
	SPI1_conf.SPIConfig.SPI_CLKSpeed        =  F_PCLK_DIV_4;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <GPIOC_Init+0xa4>)
 800100e:	2201      	movs	r2, #1
 8001010:	719a      	strb	r2, [r3, #6]
	SPI1_conf.pSPIx                         =  SPI1;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <GPIOC_Init+0xa4>)
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <GPIOC_Init+0x9c>)
 8001016:	601a      	str	r2, [r3, #0]

	// INITIALIZE SPI
	SPI_Init(&SPI1_conf);
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <GPIOC_Init+0xa4>)
 800101a:	f7ff fe28 	bl	8000c6e <SPI_Init>


	// No remap (NSS/PA4, SCK/PA5, MISO/PA6, MOSI/PA7)
	// Remap (NSS/PA15, SCK/PB3, MISO/PB4, MOSI/PB5)

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	40010800 	.word	0x40010800
 800102c:	40013000 	.word	0x40013000
 8001030:	2000003c 	.word	0x2000003c
 8001034:	2000001c 	.word	0x2000001c

08001038 <main>:


uint8_t value = 0;

int main(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0

	GPIOC_Init();
 800103e:	f7ff ffa7 	bl	8000f90 <GPIOC_Init>
	

	char buff[] = "Hello, world";
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <main+0x50>)
 8001044:	1d3c      	adds	r4, r7, #4
 8001046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001048:	c407      	stmia	r4!, {r0, r1, r2}
 800104a:	7023      	strb	r3, [r4, #0]

	SPI_Enable(SPI1,ENABLE);
 800104c:	2101      	movs	r1, #1
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <main+0x54>)
 8001050:	f7ff fdf2 	bl	8000c38 <SPI_Enable>

	SPI_SendDataIt(&SPI1_conf,(uint8_t*)buff,strlen(buff));
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f88a 	bl	8000170 <strlen>
 800105c:	4602      	mov	r2, r0
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <main+0x58>)
 8001064:	f7ff feae 	bl	8000dc4 <SPI_SendDataIt>

	SPI_Enable(SPI1,DISABLE);
 8001068:	2100      	movs	r1, #0
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <main+0x54>)
 800106c:	f7ff fde4 	bl	8000c38 <SPI_Enable>

	while(1)
	{

		for(int i=0;i<66666;i++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e002      	b.n	800107c <main+0x44>
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <main+0x5c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	ddf8      	ble.n	8001076 <main+0x3e>
 8001084:	e7f4      	b.n	8001070 <main+0x38>
 8001086:	bf00      	nop
 8001088:	0800119c 	.word	0x0800119c
 800108c:	40013000 	.word	0x40013000
 8001090:	2000001c 	.word	0x2000001c
 8001094:	00010469 	.word	0x00010469

08001098 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	for(int i=0;i<6666;i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e002      	b.n	80010aa <EXTI0_IRQHandler+0x12>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f641 2209 	movw	r2, #6665	; 0x1a09
 80010b0:	4293      	cmp	r3, r2
 80010b2:	ddf7      	ble.n	80010a4 <EXTI0_IRQHandler+0xc>
		;
	}


	// check the pr
	GPIO_IRQHandler(0);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fd81 	bl	8000bbc <GPIO_IRQHandler>

	// toggle pin
	GPIOToggle(GPIOC, 13);
 80010ba:	210d      	movs	r1, #13
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <EXTI0_IRQHandler+0x34>)
 80010be:	f7ff fd69 	bl	8000b94 <GPIOToggle>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000

080010d0 <spi_ApplicationEventCallback>:



void spi_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t event)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	return;
 80010dc:	bf00      	nop
}
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LoopForever+0xe>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <LoopForever+0x16>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001116:	f000 f811 	bl	800113c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff ff8d 	bl	8001038 <main>

0800111e <LoopForever>:

LoopForever:
  b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
   ldr   r0, =_estack
 8001120:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800112c:	080011b4 	.word	0x080011b4
  ldr r2, =_sbss
 8001130:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001134:	20000048 	.word	0x20000048

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <__libc_init_array>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	2600      	movs	r6, #0
 8001140:	4d0c      	ldr	r5, [pc, #48]	; (8001174 <__libc_init_array+0x38>)
 8001142:	4c0d      	ldr	r4, [pc, #52]	; (8001178 <__libc_init_array+0x3c>)
 8001144:	1b64      	subs	r4, r4, r5
 8001146:	10a4      	asrs	r4, r4, #2
 8001148:	42a6      	cmp	r6, r4
 800114a:	d109      	bne.n	8001160 <__libc_init_array+0x24>
 800114c:	f000 f81a 	bl	8001184 <_init>
 8001150:	2600      	movs	r6, #0
 8001152:	4d0a      	ldr	r5, [pc, #40]	; (800117c <__libc_init_array+0x40>)
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <__libc_init_array+0x44>)
 8001156:	1b64      	subs	r4, r4, r5
 8001158:	10a4      	asrs	r4, r4, #2
 800115a:	42a6      	cmp	r6, r4
 800115c:	d105      	bne.n	800116a <__libc_init_array+0x2e>
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	f855 3b04 	ldr.w	r3, [r5], #4
 8001164:	4798      	blx	r3
 8001166:	3601      	adds	r6, #1
 8001168:	e7ee      	b.n	8001148 <__libc_init_array+0xc>
 800116a:	f855 3b04 	ldr.w	r3, [r5], #4
 800116e:	4798      	blx	r3
 8001170:	3601      	adds	r6, #1
 8001172:	e7f2      	b.n	800115a <__libc_init_array+0x1e>
 8001174:	080011ac 	.word	0x080011ac
 8001178:	080011ac 	.word	0x080011ac
 800117c:	080011ac 	.word	0x080011ac
 8001180:	080011b0 	.word	0x080011b0

08001184 <_init>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	bf00      	nop
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr

08001190 <_fini>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr
