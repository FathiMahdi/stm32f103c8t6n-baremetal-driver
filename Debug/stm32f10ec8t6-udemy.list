
stm32f10ec8t6-udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001088  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080011b8  080011b8  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c8  080011c8  000111d0  2**0
                  CONTENTS
  4 .ARM          00000000  080011c8  080011c8  000111d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c8  080011d0  000111d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  080011d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  080011d0  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000111f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000145a  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000531  00000000  00000000  00012696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00012bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00012d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021c0  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b3c  00000000  00000000  00015016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008ad7  00000000  00000000  00016b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000414  00000000  00000000  0001f62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0001fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011a0 	.word	0x080011a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011a0 	.word	0x080011a0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIOClockControl>:

/// @brief GPIO clock control
/// @param pGPIOx 
/// @param status 
void GPIOClockControl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
    if(status==ENABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d157      	bne.n	8000242 <GPIOClockControl+0xc2>
    {
        if(pGPIOx==AFIO)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a55      	ldr	r2, [pc, #340]	; (80002ec <GPIOClockControl+0x16c>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIOClockControl+0x28>
        {
            AFIO_CLOCK_EN();
 800019a:	4b55      	ldr	r3, [pc, #340]	; (80002f0 <GPIOClockControl+0x170>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a54      	ldr	r2, [pc, #336]	; (80002f0 <GPIOClockControl+0x170>)
 80001a0:	f043 0301 	orr.w	r3, r3, #1
 80001a4:	6193      	str	r3, [r2, #24]
        else if(pGPIOx == GPIOG)
        {
            GPIOG_CLOCK_DS();
        }
    }
}
 80001a6:	e09b      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOA)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a52      	ldr	r2, [pc, #328]	; (80002f4 <GPIOClockControl+0x174>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIOClockControl+0x3e>
            GPIOA_CLOCK_EN();
 80001b0:	4b4f      	ldr	r3, [pc, #316]	; (80002f0 <GPIOClockControl+0x170>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a4e      	ldr	r2, [pc, #312]	; (80002f0 <GPIOClockControl+0x170>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e090      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOB)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a4d      	ldr	r2, [pc, #308]	; (80002f8 <GPIOClockControl+0x178>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIOClockControl+0x54>
            GPIOB_CLOCK_EN();
 80001c6:	4b4a      	ldr	r3, [pc, #296]	; (80002f0 <GPIOClockControl+0x170>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a49      	ldr	r2, [pc, #292]	; (80002f0 <GPIOClockControl+0x170>)
 80001cc:	f043 0308 	orr.w	r3, r3, #8
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e085      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOC)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a49      	ldr	r2, [pc, #292]	; (80002fc <GPIOClockControl+0x17c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIOClockControl+0x6a>
            GPIOC_CLOCK_EN();
 80001dc:	4b44      	ldr	r3, [pc, #272]	; (80002f0 <GPIOClockControl+0x170>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a43      	ldr	r2, [pc, #268]	; (80002f0 <GPIOClockControl+0x170>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e07a      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOD)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a44      	ldr	r2, [pc, #272]	; (8000300 <GPIOClockControl+0x180>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIOClockControl+0x80>
            GPIOD_CLOCK_EN();
 80001f2:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <GPIOClockControl+0x170>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a3e      	ldr	r2, [pc, #248]	; (80002f0 <GPIOClockControl+0x170>)
 80001f8:	f043 0320 	orr.w	r3, r3, #32
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e06f      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a40      	ldr	r2, [pc, #256]	; (8000304 <GPIOClockControl+0x184>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIOClockControl+0x96>
            GPIOE_CLOCK_EN();
 8000208:	4b39      	ldr	r3, [pc, #228]	; (80002f0 <GPIOClockControl+0x170>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a38      	ldr	r2, [pc, #224]	; (80002f0 <GPIOClockControl+0x170>)
 800020e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e064      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOF)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <GPIOClockControl+0x188>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIOClockControl+0xac>
            GPIOF_CLOCK_EN();
 800021e:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <GPIOClockControl+0x170>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a33      	ldr	r2, [pc, #204]	; (80002f0 <GPIOClockControl+0x170>)
 8000224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e059      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOG)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <GPIOClockControl+0x18c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d155      	bne.n	80002e0 <GPIOClockControl+0x160>
            GPIOG_CLOCK_EN();
 8000234:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <GPIOClockControl+0x170>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a2d      	ldr	r2, [pc, #180]	; (80002f0 <GPIOClockControl+0x170>)
 800023a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800023e:	6193      	str	r3, [r2, #24]
}
 8000240:	e04e      	b.n	80002e0 <GPIOClockControl+0x160>
    else if(status==DISABLE)
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14b      	bne.n	80002e0 <GPIOClockControl+0x160>
        if(pGPIOx == GPIOA)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a2a      	ldr	r2, [pc, #168]	; (80002f4 <GPIOClockControl+0x174>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIOClockControl+0xde>
            GPIOA_CLOCK_DS();
 8000250:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <GPIOClockControl+0x170>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a26      	ldr	r2, [pc, #152]	; (80002f0 <GPIOClockControl+0x170>)
 8000256:	f023 0304 	bic.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
}
 800025c:	e040      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOB)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a25      	ldr	r2, [pc, #148]	; (80002f8 <GPIOClockControl+0x178>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIOClockControl+0xf4>
            GPIOB_CLOCK_DS();
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <GPIOClockControl+0x170>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <GPIOClockControl+0x170>)
 800026c:	f023 0308 	bic.w	r3, r3, #8
 8000270:	6193      	str	r3, [r2, #24]
}
 8000272:	e035      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOC)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <GPIOClockControl+0x17c>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIOClockControl+0x10a>
            GPIOC_CLOCK_DS();
 800027c:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <GPIOClockControl+0x170>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <GPIOClockControl+0x170>)
 8000282:	f023 0310 	bic.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
}
 8000288:	e02a      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOD)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <GPIOClockControl+0x180>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIOClockControl+0x120>
            GPIOD_CLOCK_DS();
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <GPIOClockControl+0x170>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a16      	ldr	r2, [pc, #88]	; (80002f0 <GPIOClockControl+0x170>)
 8000298:	f023 0320 	bic.w	r3, r3, #32
 800029c:	6193      	str	r3, [r2, #24]
}
 800029e:	e01f      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOE)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <GPIOClockControl+0x184>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIOClockControl+0x136>
            GPIOE_CLOCK_DS();
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <GPIOClockControl+0x170>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <GPIOClockControl+0x170>)
 80002ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b2:	6193      	str	r3, [r2, #24]
}
 80002b4:	e014      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOF)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <GPIOClockControl+0x188>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIOClockControl+0x14c>
            GPIOF_CLOCK_DS();
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <GPIOClockControl+0x170>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <GPIOClockControl+0x170>)
 80002c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002c8:	6193      	str	r3, [r2, #24]
}
 80002ca:	e009      	b.n	80002e0 <GPIOClockControl+0x160>
        else if(pGPIOx == GPIOG)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <GPIOClockControl+0x18c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d105      	bne.n	80002e0 <GPIOClockControl+0x160>
            GPIOG_CLOCK_DS();
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <GPIOClockControl+0x170>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <GPIOClockControl+0x170>)
 80002da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002de:	6193      	str	r3, [r2, #24]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40010000 	.word	0x40010000
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	40011000 	.word	0x40011000
 8000300:	40011400 	.word	0x40011400
 8000304:	40011800 	.word	0x40011800
 8000308:	40011c00 	.word	0x40011c00
 800030c:	40012000 	.word	0x40012000

08000310 <GPIOInit>:
/// @brief GPIO initialization
/// @param pGPIOx 
/// @param mode 
/// @param speed 
void GPIOInit(GPIO_Handler_t *GPIO_conf)
{
 8000310:	b480      	push	{r7}
 8000312:	b089      	sub	sp, #36	; 0x24
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
   
    if (GPIO_conf->GPIO_PinCOnfig.PinMode == output_push_pull)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	795b      	ldrb	r3, [r3, #5]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <GPIOInit+0xa6>
    {
   

        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d920      	bls.n	800036a <GPIOInit+0x5a>
        {
            // set GIO mode CONF
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	3b1e      	subs	r3, #30
 8000336:	2101      	movs	r1, #1
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	400a      	ands	r2, r1
 8000346:	605a      	str	r2, [r3, #4]
            
            // set gpio speed MODE
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	3b08      	subs	r3, #8
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	430a      	orrs	r2, r1
 8000364:	605a      	str	r2, [r3, #4]
        }

    }

    
}
 8000366:	f000 bc1e 	b.w	8000ba6 <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	791b      	ldrb	r3, [r3, #4]
 800036e:	2b07      	cmp	r3, #7
 8000370:	f200 8419 	bhi.w	8000ba6 <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	791b      	ldrb	r3, [r3, #4]
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	3302      	adds	r3, #2
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	400a      	ands	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	799b      	ldrb	r3, [r3, #6]
 800039e:	4619      	mov	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	430a      	orrs	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
}
 80003b4:	e3f7      	b.n	8000ba6 <GPIOInit+0x896>
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == output_open_drain)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d14c      	bne.n	8000458 <GPIOInit+0x148>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	d921      	bls.n	800040a <GPIOInit+0xfa>
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE-2));
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	3b08      	subs	r3, #8
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	3b02      	subs	r3, #2
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	685a      	ldr	r2, [r3, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	799b      	ldrb	r3, [r3, #6]
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	3b08      	subs	r3, #8
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	430a      	orrs	r2, r1
 8000406:	605a      	str	r2, [r3, #4]
}
 8000408:	e3cd      	b.n	8000ba6 <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	791b      	ldrb	r3, [r3, #4]
 800040e:	2b07      	cmp	r3, #7
 8000410:	f200 83c9 	bhi.w	8000ba6 <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinMode<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	4619      	mov	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3302      	adds	r3, #2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	4619      	mov	r1, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	799b      	ldrb	r3, [r3, #6]
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	e3a6      	b.n	8000ba6 <GPIOInit+0x896>
    else if(GPIO_conf->GPIO_PinCOnfig.PinMode == input_floating || GPIO_conf->GPIO_PinCOnfig.PinMode == input_pullup_pull_down)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b05      	cmp	r3, #5
 800045e:	d003      	beq.n	8000468 <GPIOInit+0x158>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b06      	cmp	r3, #6
 8000466:	d14b      	bne.n	8000500 <GPIOInit+0x1f0>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	791b      	ldrb	r3, [r3, #4]
 800046c:	2b07      	cmp	r3, #7
 800046e:	d922      	bls.n	80004b6 <GPIOInit+0x1a6>
            GPIO_conf->pGPIOx->GPIO_CRH |= (GPIO_conf->GPIO_PinCOnfig.PinMode<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE-2));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	4619      	mov	r1, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	3b08      	subs	r3, #8
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	3b02      	subs	r3, #2
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	430a      	orrs	r2, r1
 8000492:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	3b08      	subs	r3, #8
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	400a      	ands	r2, r1
 80004b2:	605a      	str	r2, [r3, #4]
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 80004b4:	e376      	b.n	8000ba4 <GPIOInit+0x894>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	f200 8372 	bhi.w	8000ba4 <GPIOInit+0x894>
        	GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<2);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f022 0204 	bic.w	r2, r2, #4
 80004ce:	601a      	str	r2, [r3, #0]
        	GPIO_conf->pGPIOx->GPIO_CRL |=  (2<<2);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f042 0208 	orr.w	r2, r2, #8
 80004de:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 80004fe:	e351      	b.n	8000ba4 <GPIOInit+0x894>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_FT)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b07      	cmp	r3, #7
 8000506:	f040 80c8 	bne.w	800069a <GPIOInit+0x38a>
        EXTI->exti_FTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 800050a:	4ba6      	ldr	r3, [pc, #664]	; (80007a4 <GPIOInit+0x494>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4aa2      	ldr	r2, [pc, #648]	; (80007a4 <GPIOInit+0x494>)
 800051c:	430b      	orrs	r3, r1
 800051e:	60d3      	str	r3, [r2, #12]
        EXTI->exti_RTSR &= ~(1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000520:	4ba0      	ldr	r3, [pc, #640]	; (80007a4 <GPIOInit+0x494>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a9c      	ldr	r2, [pc, #624]	; (80007a4 <GPIOInit+0x494>)
 8000534:	400b      	ands	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000538:	4b9a      	ldr	r3, [pc, #616]	; (80007a4 <GPIOInit+0x494>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a96      	ldr	r2, [pc, #600]	; (80007a4 <GPIOInit+0x494>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	60fb      	str	r3, [r7, #12]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	f003 0303 	and.w	r3, r3, #3
 8000560:	60bb      	str	r3, [r7, #8]
        if(GPIO_conf->pGPIOx == GPIOA)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a90      	ldr	r2, [pc, #576]	; (80007a8 <GPIOInit+0x498>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d111      	bne.n	8000590 <GPIOInit+0x280>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 800056c:	4a8f      	ldr	r2, [pc, #572]	; (80007ac <GPIOInit+0x49c>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3302      	adds	r3, #2
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	2101      	movs	r1, #1
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	43d2      	mvns	r2, r2
 8000582:	498a      	ldr	r1, [pc, #552]	; (80007ac <GPIOInit+0x49c>)
 8000584:	401a      	ands	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3302      	adds	r3, #2
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800058e:	e30a      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a86      	ldr	r2, [pc, #536]	; (80007b0 <GPIOInit+0x4a0>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d110      	bne.n	80005bc <GPIOInit+0x2ac>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2);
 800059a:	4a84      	ldr	r2, [pc, #528]	; (80007ac <GPIOInit+0x49c>)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3302      	adds	r3, #2
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	0092      	lsls	r2, r2, #2
 80005a8:	2101      	movs	r1, #1
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	497f      	ldr	r1, [pc, #508]	; (80007ac <GPIOInit+0x49c>)
 80005b0:	431a      	orrs	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3302      	adds	r3, #2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005ba:	e2f4      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a7c      	ldr	r2, [pc, #496]	; (80007b4 <GPIOInit+0x4a4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d110      	bne.n	80005e8 <GPIOInit+0x2d8>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 80005c6:	4a79      	ldr	r2, [pc, #484]	; (80007ac <GPIOInit+0x49c>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3302      	adds	r3, #2
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	2102      	movs	r1, #2
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	4974      	ldr	r1, [pc, #464]	; (80007ac <GPIOInit+0x49c>)
 80005dc:	431a      	orrs	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3302      	adds	r3, #2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005e6:	e2de      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOD)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a72      	ldr	r2, [pc, #456]	; (80007b8 <GPIOInit+0x4a8>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d110      	bne.n	8000614 <GPIOInit+0x304>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 80005f2:	4a6e      	ldr	r2, [pc, #440]	; (80007ac <GPIOInit+0x49c>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	2103      	movs	r1, #3
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4969      	ldr	r1, [pc, #420]	; (80007ac <GPIOInit+0x49c>)
 8000608:	431a      	orrs	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3302      	adds	r3, #2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000612:	e2c8      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a68      	ldr	r2, [pc, #416]	; (80007bc <GPIOInit+0x4ac>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d110      	bne.n	8000640 <GPIOInit+0x330>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 800061e:	4a63      	ldr	r2, [pc, #396]	; (80007ac <GPIOInit+0x49c>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3302      	adds	r3, #2
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	2104      	movs	r1, #4
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	495e      	ldr	r1, [pc, #376]	; (80007ac <GPIOInit+0x49c>)
 8000634:	431a      	orrs	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3302      	adds	r3, #2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800063e:	e2b2      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a5e      	ldr	r2, [pc, #376]	; (80007c0 <GPIOInit+0x4b0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d110      	bne.n	800066c <GPIOInit+0x35c>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 800064a:	4a58      	ldr	r2, [pc, #352]	; (80007ac <GPIOInit+0x49c>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3302      	adds	r3, #2
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	2105      	movs	r1, #5
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4953      	ldr	r1, [pc, #332]	; (80007ac <GPIOInit+0x49c>)
 8000660:	431a      	orrs	r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3302      	adds	r3, #2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800066a:	e29c      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a54      	ldr	r2, [pc, #336]	; (80007c4 <GPIOInit+0x4b4>)
 8000672:	4293      	cmp	r3, r2
 8000674:	f040 8297 	bne.w	8000ba6 <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 8000678:	4a4c      	ldr	r2, [pc, #304]	; (80007ac <GPIOInit+0x49c>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3302      	adds	r3, #2
 800067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	2106      	movs	r1, #6
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4947      	ldr	r1, [pc, #284]	; (80007ac <GPIOInit+0x49c>)
 800068e:	431a      	orrs	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3302      	adds	r3, #2
 8000694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000698:	e285      	b.n	8000ba6 <GPIOInit+0x896>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_RT)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b08      	cmp	r3, #8
 80006a0:	f040 80eb 	bne.w	800087a <GPIOInit+0x56a>
        GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	3b08      	subs	r3, #8
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	605a      	str	r2, [r3, #4]
        EXTI->exti_RTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <GPIOInit+0x494>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <GPIOInit+0x494>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6093      	str	r3, [r2, #8]
        EXTI->exti_FTSR &= ~(1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <GPIOInit+0x494>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7912      	ldrb	r2, [r2, #4]
 80006e2:	4611      	mov	r1, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	408a      	lsls	r2, r1
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <GPIOInit+0x494>)
 80006ee:	400b      	ands	r3, r1
 80006f0:	60d3      	str	r3, [r2, #12]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <GPIOInit+0x494>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	7912      	ldrb	r2, [r2, #4]
 80006fa:	4611      	mov	r1, r2
 80006fc:	2201      	movs	r2, #1
 80006fe:	408a      	lsls	r2, r1
 8000700:	4611      	mov	r1, r2
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <GPIOInit+0x494>)
 8000704:	430b      	orrs	r3, r1
 8000706:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	617b      	str	r3, [r7, #20]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	613b      	str	r3, [r7, #16]
        if(GPIO_conf->pGPIOx == GPIOA)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <GPIOInit+0x498>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d111      	bne.n	800074a <GPIOInit+0x43a>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <GPIOInit+0x49c>)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3302      	adds	r3, #2
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	0092      	lsls	r2, r2, #2
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	43d2      	mvns	r2, r2
 800073c:	491b      	ldr	r1, [pc, #108]	; (80007ac <GPIOInit+0x49c>)
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3302      	adds	r3, #2
 8000744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000748:	e22d      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <GPIOInit+0x4a0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d110      	bne.n	8000776 <GPIOInit+0x466>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2); 
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <GPIOInit+0x49c>)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3302      	adds	r3, #2
 800075a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	4910      	ldr	r1, [pc, #64]	; (80007ac <GPIOInit+0x49c>)
 800076a:	431a      	orrs	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3302      	adds	r3, #2
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000774:	e217      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <GPIOInit+0x4a4>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d123      	bne.n	80007c8 <GPIOInit+0x4b8>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <GPIOInit+0x49c>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3302      	adds	r3, #2
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	2102      	movs	r1, #2
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4905      	ldr	r1, [pc, #20]	; (80007ac <GPIOInit+0x49c>)
 8000796:	431a      	orrs	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3302      	adds	r3, #2
 800079c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007a0:	e201      	b.n	8000ba6 <GPIOInit+0x896>
 80007a2:	bf00      	nop
 80007a4:	40010400 	.word	0x40010400
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40010000 	.word	0x40010000
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	40011000 	.word	0x40011000
 80007b8:	40011400 	.word	0x40011400
 80007bc:	40011800 	.word	0x40011800
 80007c0:	40011c00 	.word	0x40011c00
 80007c4:	40012000 	.word	0x40012000
        else if(GPIO_conf->pGPIOx == GPIOD)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a91      	ldr	r2, [pc, #580]	; (8000a14 <GPIOInit+0x704>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d110      	bne.n	80007f4 <GPIOInit+0x4e4>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 80007d2:	4a91      	ldr	r2, [pc, #580]	; (8000a18 <GPIOInit+0x708>)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3302      	adds	r3, #2
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	0092      	lsls	r2, r2, #2
 80007e0:	2103      	movs	r1, #3
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	498c      	ldr	r1, [pc, #560]	; (8000a18 <GPIOInit+0x708>)
 80007e8:	431a      	orrs	r2, r3
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3302      	adds	r3, #2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007f2:	e1d8      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a88      	ldr	r2, [pc, #544]	; (8000a1c <GPIOInit+0x70c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d110      	bne.n	8000820 <GPIOInit+0x510>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 80007fe:	4a86      	ldr	r2, [pc, #536]	; (8000a18 <GPIOInit+0x708>)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3302      	adds	r3, #2
 8000804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	2104      	movs	r1, #4
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	4981      	ldr	r1, [pc, #516]	; (8000a18 <GPIOInit+0x708>)
 8000814:	431a      	orrs	r2, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3302      	adds	r3, #2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800081e:	e1c2      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a7e      	ldr	r2, [pc, #504]	; (8000a20 <GPIOInit+0x710>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d110      	bne.n	800084c <GPIOInit+0x53c>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 800082a:	4a7b      	ldr	r2, [pc, #492]	; (8000a18 <GPIOInit+0x708>)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	3302      	adds	r3, #2
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	2105      	movs	r1, #5
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	4976      	ldr	r1, [pc, #472]	; (8000a18 <GPIOInit+0x708>)
 8000840:	431a      	orrs	r2, r3
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3302      	adds	r3, #2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800084a:	e1ac      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a74      	ldr	r2, [pc, #464]	; (8000a24 <GPIOInit+0x714>)
 8000852:	4293      	cmp	r3, r2
 8000854:	f040 81a7 	bne.w	8000ba6 <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 8000858:	4a6f      	ldr	r2, [pc, #444]	; (8000a18 <GPIOInit+0x708>)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3302      	adds	r3, #2
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	2106      	movs	r1, #6
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	496a      	ldr	r1, [pc, #424]	; (8000a18 <GPIOInit+0x708>)
 800086e:	431a      	orrs	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3302      	adds	r3, #2
 8000874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000878:	e195      	b.n	8000ba6 <GPIOInit+0x896>
    else if( GPIO_conf->GPIO_PinCOnfig.PinMode == IT_RFT)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	2b08      	cmp	r3, #8
 8000880:	f040 80da 	bne.w	8000a38 <GPIOInit+0x728>
        EXTI->exti_RTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <GPIOInit+0x718>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7912      	ldrb	r2, [r2, #4]
 800088c:	4611      	mov	r1, r2
 800088e:	2201      	movs	r2, #1
 8000890:	408a      	lsls	r2, r1
 8000892:	4611      	mov	r1, r2
 8000894:	4a64      	ldr	r2, [pc, #400]	; (8000a28 <GPIOInit+0x718>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6093      	str	r3, [r2, #8]
        EXTI->exti_FTSR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 800089a:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <GPIOInit+0x718>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	7912      	ldrb	r2, [r2, #4]
 80008a2:	4611      	mov	r1, r2
 80008a4:	2201      	movs	r2, #1
 80008a6:	408a      	lsls	r2, r1
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a5f      	ldr	r2, [pc, #380]	; (8000a28 <GPIOInit+0x718>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	60d3      	str	r3, [r2, #12]
        EXTI->exti_IMR |= (1<<GPIO_conf->GPIO_PinCOnfig.PinNumber);
 80008b0:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <GPIOInit+0x718>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7912      	ldrb	r2, [r2, #4]
 80008b8:	4611      	mov	r1, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	408a      	lsls	r2, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	4a59      	ldr	r2, [pc, #356]	; (8000a28 <GPIOInit+0x718>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
        uint32_t temp1 = GPIO_conf->GPIO_PinCOnfig.PinNumber/4;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	61fb      	str	r3, [r7, #28]
        uint32_t temp2 = GPIO_conf->GPIO_PinCOnfig.PinNumber%4;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	61bb      	str	r3, [r7, #24]
        if(GPIO_conf->pGPIOx == GPIOA)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a53      	ldr	r2, [pc, #332]	; (8000a2c <GPIOInit+0x71c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d111      	bne.n	8000908 <GPIOInit+0x5f8>
            AFIO->AFIO_EXTICR[temp1] &= ~(1<<4*temp2);
 80008e4:	4a4c      	ldr	r2, [pc, #304]	; (8000a18 <GPIOInit+0x708>)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3302      	adds	r3, #2
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4947      	ldr	r1, [pc, #284]	; (8000a18 <GPIOInit+0x708>)
 80008fc:	401a      	ands	r2, r3
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3302      	adds	r3, #2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000906:	e14e      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOB)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <GPIOInit+0x720>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d110      	bne.n	8000934 <GPIOInit+0x624>
            AFIO->AFIO_EXTICR[temp1] |= (1<<4*temp2);
 8000912:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <GPIOInit+0x708>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	3302      	adds	r3, #2
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	493c      	ldr	r1, [pc, #240]	; (8000a18 <GPIOInit+0x708>)
 8000928:	431a      	orrs	r2, r3
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3302      	adds	r3, #2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000932:	e138      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOC)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a3e      	ldr	r2, [pc, #248]	; (8000a34 <GPIOInit+0x724>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d110      	bne.n	8000960 <GPIOInit+0x650>
            AFIO->AFIO_EXTICR[temp1] |= (2<<4*temp2);
 800093e:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <GPIOInit+0x708>)
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	2102      	movs	r1, #2
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4931      	ldr	r1, [pc, #196]	; (8000a18 <GPIOInit+0x708>)
 8000954:	431a      	orrs	r2, r3
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3302      	adds	r3, #2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095e:	e122      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOD)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <GPIOInit+0x704>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d110      	bne.n	800098c <GPIOInit+0x67c>
            AFIO->AFIO_EXTICR[temp1] |= (3<<4*temp2);
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <GPIOInit+0x708>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	3302      	adds	r3, #2
 8000970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	2103      	movs	r1, #3
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	4926      	ldr	r1, [pc, #152]	; (8000a18 <GPIOInit+0x708>)
 8000980:	431a      	orrs	r2, r3
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3302      	adds	r3, #2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800098a:	e10c      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <GPIOInit+0x70c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d110      	bne.n	80009b8 <GPIOInit+0x6a8>
            AFIO->AFIO_EXTICR[temp1] |= (4<<4*temp2);
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <GPIOInit+0x708>)
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	3302      	adds	r3, #2
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	2104      	movs	r1, #4
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	491b      	ldr	r1, [pc, #108]	; (8000a18 <GPIOInit+0x708>)
 80009ac:	431a      	orrs	r2, r3
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3302      	adds	r3, #2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009b6:	e0f6      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOF)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <GPIOInit+0x710>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d110      	bne.n	80009e4 <GPIOInit+0x6d4>
            AFIO->AFIO_EXTICR[temp1] |= (5<<4*temp2);
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <GPIOInit+0x708>)
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	2105      	movs	r1, #5
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	4910      	ldr	r1, [pc, #64]	; (8000a18 <GPIOInit+0x708>)
 80009d8:	431a      	orrs	r2, r3
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3302      	adds	r3, #2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009e2:	e0e0      	b.n	8000ba6 <GPIOInit+0x896>
        else if(GPIO_conf->pGPIOx == GPIOG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <GPIOInit+0x714>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	f040 80db 	bne.w	8000ba6 <GPIOInit+0x896>
            AFIO->AFIO_EXTICR[temp1] |= (6<<4*temp2);
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <GPIOInit+0x708>)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3302      	adds	r3, #2
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	2106      	movs	r1, #6
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4904      	ldr	r1, [pc, #16]	; (8000a18 <GPIOInit+0x708>)
 8000a06:	431a      	orrs	r2, r3
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a10:	e0c9      	b.n	8000ba6 <GPIOInit+0x896>
 8000a12:	bf00      	nop
 8000a14:	40011400 	.word	0x40011400
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	40011800 	.word	0x40011800
 8000a20:	40011c00 	.word	0x40011c00
 8000a24:	40012000 	.word	0x40012000
 8000a28:	40010400 	.word	0x40010400
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40011000 	.word	0x40011000
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == alternate_push_pull)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	795b      	ldrb	r3, [r3, #5]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d166      	bne.n	8000b0e <GPIOInit+0x7fe>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d92e      	bls.n	8000aa6 <GPIOInit+0x796>
            GPIO_conf->pGPIOx->GPIO_CRH &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3b1e      	subs	r3, #30
 8000a56:	2101      	movs	r1, #1
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (2<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	3b1e      	subs	r3, #30
 8000a76:	2102      	movs	r1, #2
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	3b08      	subs	r3, #8
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	605a      	str	r2, [r3, #4]
}
 8000aa4:	e07f      	b.n	8000ba6 <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	d87b      	bhi.n	8000ba6 <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL &= ~(1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	400a      	ands	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (2<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	2102      	movs	r1, #2
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	799b      	ldrb	r3, [r3, #6]
 8000af6:	4619      	mov	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	e04b      	b.n	8000ba6 <GPIOInit+0x896>
    else if (GPIO_conf->GPIO_PinCOnfig.PinMode == alternate_open_drain)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d147      	bne.n	8000ba6 <GPIOInit+0x896>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	2b07      	cmp	r3, #7
 8000b1c:	d91e      	bls.n	8000b5c <GPIOInit+0x84c>
            GPIO_conf->pGPIOx->GPIO_CRH |= (3<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-30));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	3b1e      	subs	r3, #30
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
            GPIO_conf->pGPIOx->GPIO_CRH |= (1<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)-REGISTER_SIZE));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	3b08      	subs	r3, #8
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	605a      	str	r2, [r3, #4]
}
 8000b5a:	e024      	b.n	8000ba6 <GPIOInit+0x896>
        else if  (GPIO_conf->GPIO_PinCOnfig.PinNumber <= 7)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	791b      	ldrb	r3, [r3, #4]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d820      	bhi.n	8000ba6 <GPIOInit+0x896>
            GPIO_conf->pGPIOx->GPIO_CRL |= (3<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)+2));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	791b      	ldrb	r3, [r3, #4]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	3302      	adds	r3, #2
 8000b72:	2103      	movs	r1, #3
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
            GPIO_conf->pGPIOx->GPIO_CRL |= (GPIO_conf->GPIO_PinCOnfig.PinSpeed<<(4*(GPIO_conf->GPIO_PinCOnfig.PinNumber)));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	799b      	ldrb	r3, [r3, #6]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	791b      	ldrb	r3, [r3, #4]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	e000      	b.n	8000ba6 <GPIOInit+0x896>
        if  (GPIO_conf->GPIO_PinCOnfig.PinNumber>7)
 8000ba4:	bf00      	nop
}
 8000ba6:	bf00      	nop
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <GPIOToggle>:

/// @brief Toggle pin
/// @param pGPIOx 
/// @param pin 
void GPIOToggle(GPIO_RegDef_t *pGPIOx, uint8_t pin)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
    pGPIOx->GPIO_ODR ^= (1<<pin);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	405a      	eors	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60da      	str	r2, [r3, #12]

}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <GPIO_IRQHandler>:


/// @brief 
/// @param PinNumber 
void GPIO_IRQHandler(uint8_t PinNumber)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]

    // clear the pr register
    if(EXTI->exti_PR & (1<<PinNumber))
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <GPIO_IRQHandler+0x3c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	2101      	movs	r1, #1
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d009      	beq.n	8000c08 <GPIO_IRQHandler+0x30>
    {
        EXTI->exti_PR |= (1<<PinNumber);
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <GPIO_IRQHandler+0x3c>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	79fa      	ldrb	r2, [r7, #7]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4611      	mov	r1, r2
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <GPIO_IRQHandler+0x3c>)
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6153      	str	r3, [r2, #20]
    }

}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40010400 	.word	0x40010400

08000c18 <SPI_ClockControl>:
static void spi_tx_it_handle(SPI_Handle_t *pSPIHandle);
static void spi_rx_it_handle(SPI_Handle_t *pSPIHandle);


void SPI_ClockControl(SPI_RegDef_t *pSPIx, uint8_t status)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
    if(status == ENABLE)
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <SPI_ClockControl+0x20>
    {
        SPI1_CLOCK_EN();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <SPI_ClockControl+0x38>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <SPI_ClockControl+0x38>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c34:	6193      	str	r3, [r2, #24]
    else
    {
        SPI1_CLOCK_DS();
    }

}
 8000c36:	e005      	b.n	8000c44 <SPI_ClockControl+0x2c>
        SPI1_CLOCK_DS();
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SPI_ClockControl+0x38>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <SPI_ClockControl+0x38>)
 8000c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c42:	6193      	str	r3, [r2, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <SPI_Enable>:


void SPI_Enable(SPI_RegDef_t *pSPIx, uint8_t en_ds)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    if(en_ds==ENABLE)
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d106      	bne.n	8000c74 <SPI_Enable+0x20>
    {
        // set the SPI enable
        pSPIx->SPI_CR1 |= (1<<6);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
    else
    {
        // set the SPI enable
        pSPIx->SPI_CR1 &= ~(1<<6);
    }
}
 8000c72:	e005      	b.n	8000c80 <SPI_Enable+0x2c>
        pSPIx->SPI_CR1 &= ~(1<<6);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]

    // set the CPHA
   if(pSPIHandle->SPIConfig.SPI_CPHA == 1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a5b      	ldrb	r3, [r3, #9]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <SPI_Init+0x24>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<0);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <SPI_Init+0x34>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<0);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
   }


   // set the CPOL
   if(pSPIHandle->SPIConfig.SPI_CPOL == 1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7a1b      	ldrb	r3, [r3, #8]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d108      	bne.n	8000cda <SPI_Init+0x50>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0202 	orr.w	r2, r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e007      	b.n	8000cea <SPI_Init+0x60>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<1);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0202 	bic.w	r2, r2, #2
 8000ce8:	601a      	str	r2, [r3, #0]
   }


    // Device mode
   if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_MASTER)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <SPI_Init+0x7c>
   {
       pSPIHandle->pSPIx->SPI_CR1 |= (1<<2);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0204 	orr.w	r2, r2, #4
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e007      	b.n	8000d16 <SPI_Init+0x8c>
   }

   else
   {
       pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<2);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0204 	bic.w	r2, r2, #4
 8000d14:	601a      	str	r2, [r3, #0]
   }



    // set the spi clock
    pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_CLKSpeed<<3);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	799b      	ldrb	r3, [r3, #6]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	00d9      	lsls	r1, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]


    // set software slave management

    if(pSPIHandle->SPIConfig.SSM == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7a9b      	ldrb	r3, [r3, #10]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d108      	bne.n	8000d48 <SPI_Init+0xbe>
    {
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<9);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e007      	b.n	8000d58 <SPI_Init+0xce>
    }


    else
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<9);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d56:	601a      	str	r2, [r3, #0]
    }
    
    

    // set data frame format
    if(pSPIHandle->SPIConfig.SPI_DFF == SPI_DFF_16_BIT)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <SPI_Init+0xea>
    {
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<11);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e007      	b.n	8000d84 <SPI_Init+0xfa>
    }

    else
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<11);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d82:	601a      	str	r2, [r3, #0]
    }


    // set the spi bus mode
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_FULLDUBLEX)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d108      	bne.n	8000da0 <SPI_Init+0x116>
    {
        pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<15);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d9c:	601a      	str	r2, [r3, #0]
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
    }

    
    
}
 8000d9e:	e01a      	b.n	8000dd6 <SPI_Init+0x14c>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_HALFDUPLEX)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <SPI_Init+0x132>
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	e00c      	b.n	8000dd6 <SPI_Init+0x14c>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_SIMPLEX)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d107      	bne.n	8000dd6 <SPI_Init+0x14c>
        pSPIHandle->pSPIx->SPI_CR1 |= (1<<15);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SPI_SendDataIt>:
/// @brief 
/// @param pSPIHandle 
/// @param Tx_data_buffer 
/// @param data_len 
SPI_IT_STATUS SPI_SendDataIt(SPI_Handle_t *pSPIHandle, uint8_t *Tx_data_buffer, uint32_t data_len)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]

    if(pSPIHandle->TxState != SPI_BUSSY_TX)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	7f1b      	ldrb	r3, [r3, #28]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d010      	beq.n	8000e16 <SPI_SendDataIt+0x36>
    {
        // Save the tx buffer
        pSPIHandle->pTxBuffer = Tx_data_buffer;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen = data_len;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	615a      	str	r2, [r3, #20]

        // Mark the spi TX as bussy
        pSPIHandle->TxState = SPI_BUSSY_TX;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2202      	movs	r2, #2
 8000e04:	771a      	strb	r2, [r3, #28]

        // enable the TXIE
        pSPIHandle->pSPIx->SPI_CR2 |= (1<<7);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e14:	605a      	str	r2, [r3, #4]
    }
    
    return pSPIHandle->TxState;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	7f1b      	ldrb	r3, [r3, #28]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <spi_tx_it_handle>:
}



static void spi_tx_it_handle(SPI_Handle_t *pSPIHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

    
    // check the frame format
    if(pSPIHandle->pSPIx->SPI_CR1 & (1<<11))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d015      	beq.n	8000e66 <spi_tx_it_handle+0x42>
    {
        // send two bytes to the data register
        pSPIHandle->pSPIx->SPI_DR = *((uint16_t *) pSPIHandle->pTxBuffer);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60da      	str	r2, [r3, #12]

        pSPIHandle->TxLen--;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	615a      	str	r2, [r3, #20]

        pSPIHandle->TxLen--;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	615a      	str	r2, [r3, #20]

        (uint16_t *)pSPIHandle->pTxBuffer++; // increment the buffer address
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	e00f      	b.n	8000e86 <spi_tx_it_handle+0x62>
    }

    else
    {
        // send 1 byte to the data register
        pSPIHandle->pSPIx->SPI_DR = *pSPIHandle->pTxBuffer;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60da      	str	r2, [r3, #12]

        pSPIHandle->TxLen--;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	1e5a      	subs	r2, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	615a      	str	r2, [r3, #20]

        pSPIHandle->pTxBuffer++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60da      	str	r2, [r3, #12]
    }
    
    // ! الكود ده مجعبص
    if(pSPIHandle->TxLen==0)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d111      	bne.n	8000eb2 <spi_tx_it_handle+0x8e>
    {
        pSPIHandle->pSPIx->SPI_CR2 &= ~(1<<7);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e9c:	605a      	str	r2, [r3, #4]
        pSPIHandle->pTxBuffer = NULL;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxState = SPI_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
        spi_ApplicationEventCallback(pSPIHandle,SPI_CMPLT_TX); //    جعبصة  
 8000eaa:	2103      	movs	r1, #3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f91d 	bl	80010ec <spi_ApplicationEventCallback>
    }

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <spi_rx_it_handle>:


static void spi_rx_it_handle(SPI_Handle_t *pSPIHandle)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
    // check the frame format
    if(pSPIHandle->pSPIx->SPI_CR1 & (1<<11))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d016      	beq.n	8000efe <spi_rx_it_handle+0x44>
    {
        // recive two bytes to the data register
        *((uint16_t *) pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->SPI_DR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	b292      	uxth	r2, r2
 8000edc:	801a      	strh	r2, [r3, #0]

        pSPIHandle->RxLen--;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]

        pSPIHandle->RxLen--;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]

        (uint16_t *)pSPIHandle->pRxBuffer++; // increment the buffer address
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	e010      	b.n	8000f20 <spi_rx_it_handle+0x66>
    }

    else
    {
        // receive 1 byte to the data register
        *pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->SPI_DR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]

        pSPIHandle->RxLen--;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]

        pSPIHandle->pRxBuffer++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	611a      	str	r2, [r3, #16]
    }

    
    // Disable the Rx interrupt
    if(pSPIHandle->RxLen==0)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d111      	bne.n	8000f4c <spi_rx_it_handle+0x92>
    {
        pSPIHandle->pSPIx->SPI_CR2 &= ~(1<<6);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f36:	605a      	str	r2, [r3, #4]
        pSPIHandle->pRxBuffer = NULL;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
        pSPIHandle->RxState = SPI_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	775a      	strb	r2, [r3, #29]
        spi_ApplicationEventCallback(pSPIHandle,SPI_CMPLT_RX);
 8000f44:	2104      	movs	r1, #4
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f8d0 	bl	80010ec <spi_ApplicationEventCallback>
    }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <SPI1_IRQHandler>:



void SPI1_IRQHandler(SPI_Handle_t *pSPIHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	// check if tx

	if((pSPIHandle->pSPIx->SPI_SR & (1<<1)) && (pSPIHandle->pSPIx->SPI_CR2 & (1<<7)))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <SPI1_IRQHandler+0x2c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <SPI1_IRQHandler+0x2c>
	{
		spi_tx_it_handle(pSPIHandle);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff53 	bl	8000e24 <spi_tx_it_handle>
		spi_rx_it_handle(pSPIHandle);
	}

	// check if error

}
 8000f7e:	e010      	b.n	8000fa2 <SPI1_IRQHandler+0x4e>
	else if((pSPIHandle->pSPIx->SPI_SR & (1<<0)) && (pSPIHandle->pSPIx->SPI_CR2 & (1<<6)))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <SPI1_IRQHandler+0x4e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <SPI1_IRQHandler+0x4e>
		spi_rx_it_handle(pSPIHandle);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff8c 	bl	8000eba <spi_rx_it_handle>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <GPIOC_Init>:
GPIO_Handler_t SPIPIN_conf;



void GPIOC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	
	// enable portc clock
	GPIOClockControl(AFIO,ENABLE);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <GPIOC_Init+0x94>)
 8000fb4:	f7ff f8e4 	bl	8000180 <GPIOClockControl>
	GPIOClockControl(GPIOA,ENABLE);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <GPIOC_Init+0x98>)
 8000fbc:	f7ff f8e0 	bl	8000180 <GPIOClockControl>
	SPI_ClockControl(SPI1,ENABLE);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <GPIOC_Init+0x9c>)
 8000fc4:	f7ff fe28 	bl	8000c18 <SPI_ClockControl>

	// set SCK
	SPIPIN_conf.GPIO_PinCOnfig.PinNumber = 5;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <GPIOC_Init+0xa0>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	711a      	strb	r2, [r3, #4]
	SPIPIN_conf.GPIO_PinCOnfig.PinMode = alternate_push_pull;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <GPIOC_Init+0xa0>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	715a      	strb	r2, [r3, #5]
	SPIPIN_conf.GPIO_PinCOnfig.PinSpeed = MHz_50;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <GPIOC_Init+0xa0>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	719a      	strb	r2, [r3, #6]
	SPIPIN_conf.pGPIOx = GPIOA;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <GPIOC_Init+0xa0>)
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <GPIOC_Init+0x98>)
 8000fde:	601a      	str	r2, [r3, #0]
	GPIOInit(&SPIPIN_conf);
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <GPIOC_Init+0xa0>)
 8000fe2:	f7ff f995 	bl	8000310 <GPIOInit>


	// set MOSI
	SPIPIN_conf.GPIO_PinCOnfig.PinNumber = 7;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <GPIOC_Init+0xa0>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	711a      	strb	r2, [r3, #4]
	SPIPIN_conf.GPIO_PinCOnfig.PinMode = alternate_push_pull;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <GPIOC_Init+0xa0>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	715a      	strb	r2, [r3, #5]
	SPIPIN_conf.GPIO_PinCOnfig.PinSpeed = MHz_50;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <GPIOC_Init+0xa0>)
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	719a      	strb	r2, [r3, #6]
	SPIPIN_conf.pGPIOx = GPIOA;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <GPIOC_Init+0xa0>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <GPIOC_Init+0x98>)
 8000ffc:	601a      	str	r2, [r3, #0]
	GPIOInit(&SPIPIN_conf);
 8000ffe:	4813      	ldr	r0, [pc, #76]	; (800104c <GPIOC_Init+0xa0>)
 8001000:	f7ff f986 	bl	8000310 <GPIOInit>



	SPI1_conf.SPIConfig.SPI_DeviceMode 		=  SPI_MASTER;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <GPIOC_Init+0xa4>)
 8001006:	2201      	movs	r2, #1
 8001008:	711a      	strb	r2, [r3, #4]
	SPI1_conf.SPIConfig.SPI_CPHA  			=  0;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <GPIOC_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	725a      	strb	r2, [r3, #9]
	SPI1_conf.SPIConfig.SPI_CPOL  			=  0;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <GPIOC_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	721a      	strb	r2, [r3, #8]
	SPI1_conf.SPIConfig.SPI_DFF   			=  SPI_DFF_8_BIT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <GPIOC_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	71da      	strb	r2, [r3, #7]
	SPI1_conf.SPIConfig.SSM       			=  DISABLE;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <GPIOC_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	729a      	strb	r2, [r3, #10]
	SPI1_conf.SPIConfig.SPI_BusConfig       =  SPI_FULLDUBLEX;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <GPIOC_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	715a      	strb	r2, [r3, #5]
	SPI1_conf.SPIConfig.SPI_CLKSpeed        =  F_PCLK_DIV_4;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <GPIOC_Init+0xa4>)
 800102a:	2201      	movs	r2, #1
 800102c:	719a      	strb	r2, [r3, #6]
	SPI1_conf.pSPIx                         =  SPI1;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <GPIOC_Init+0xa4>)
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <GPIOC_Init+0x9c>)
 8001032:	601a      	str	r2, [r3, #0]

	// INITIALIZE SPI
	SPI_Init(&SPI1_conf);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <GPIOC_Init+0xa4>)
 8001036:	f7ff fe28 	bl	8000c8a <SPI_Init>


	// No remap (NSS/PA4, SCK/PA5, MISO/PA6, MOSI/PA7)
	// Remap (NSS/PA15, SCK/PB3, MISO/PB4, MOSI/PB5)

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	40010800 	.word	0x40010800
 8001048:	40013000 	.word	0x40013000
 800104c:	2000003c 	.word	0x2000003c
 8001050:	2000001c 	.word	0x2000001c

08001054 <main>:


uint8_t value = 0;

int main(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0

	GPIOC_Init();
 800105a:	f7ff ffa7 	bl	8000fac <GPIOC_Init>
	// UART1_Init();

	char buff[] = "Hello, world";
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0x50>)
 8001060:	1d3c      	adds	r4, r7, #4
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	c407      	stmia	r4!, {r0, r1, r2}
 8001066:	7023      	strb	r3, [r4, #0]

	SPI_Enable(SPI1,ENABLE);
 8001068:	2101      	movs	r1, #1
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <main+0x54>)
 800106c:	f7ff fdf2 	bl	8000c54 <SPI_Enable>

	SPI_SendDataIt(&SPI1_conf,(uint8_t*)buff,strlen(buff));
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f87c 	bl	8000170 <strlen>
 8001078:	4602      	mov	r2, r0
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <main+0x58>)
 8001080:	f7ff feae 	bl	8000de0 <SPI_SendDataIt>

	SPI_Enable(SPI1,DISABLE);
 8001084:	2100      	movs	r1, #0
 8001086:	4808      	ldr	r0, [pc, #32]	; (80010a8 <main+0x54>)
 8001088:	f7ff fde4 	bl	8000c54 <SPI_Enable>

	while(1)
	{

		for(int i=0;i<66666;i++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e002      	b.n	8001098 <main+0x44>
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <main+0x5c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	ddf8      	ble.n	8001092 <main+0x3e>
 80010a0:	e7f4      	b.n	800108c <main+0x38>
 80010a2:	bf00      	nop
 80010a4:	080011b8 	.word	0x080011b8
 80010a8:	40013000 	.word	0x40013000
 80010ac:	2000001c 	.word	0x2000001c
 80010b0:	00010469 	.word	0x00010469

080010b4 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	for(int i=0;i<6666;i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	e002      	b.n	80010c6 <EXTI0_IRQHandler+0x12>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f641 2209 	movw	r2, #6665	; 0x1a09
 80010cc:	4293      	cmp	r3, r2
 80010ce:	ddf7      	ble.n	80010c0 <EXTI0_IRQHandler+0xc>
		;
	}


	// check the pr
	GPIO_IRQHandler(0);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd81 	bl	8000bd8 <GPIO_IRQHandler>

	// toggle pin
	GPIOToggle(GPIOC, 13);
 80010d6:	210d      	movs	r1, #13
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <EXTI0_IRQHandler+0x34>)
 80010da:	f7ff fd69 	bl	8000bb0 <GPIOToggle>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40011000 	.word	0x40011000

080010ec <spi_ApplicationEventCallback>:



void spi_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t event)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
	return;
 80010f8:	bf00      	nop
}
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001106:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001108:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	; (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001132:	f000 f811 	bl	8001158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff ff8d 	bl	8001054 <main>

0800113a <LoopForever>:

LoopForever:
  b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
   ldr   r0, =_estack
 800113c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001148:	080011d0 	.word	0x080011d0
  ldr r2, =_sbss
 800114c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001150:	20000048 	.word	0x20000048

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <__libc_init_array>:
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	2600      	movs	r6, #0
 800115c:	4d0c      	ldr	r5, [pc, #48]	; (8001190 <__libc_init_array+0x38>)
 800115e:	4c0d      	ldr	r4, [pc, #52]	; (8001194 <__libc_init_array+0x3c>)
 8001160:	1b64      	subs	r4, r4, r5
 8001162:	10a4      	asrs	r4, r4, #2
 8001164:	42a6      	cmp	r6, r4
 8001166:	d109      	bne.n	800117c <__libc_init_array+0x24>
 8001168:	f000 f81a 	bl	80011a0 <_init>
 800116c:	2600      	movs	r6, #0
 800116e:	4d0a      	ldr	r5, [pc, #40]	; (8001198 <__libc_init_array+0x40>)
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <__libc_init_array+0x44>)
 8001172:	1b64      	subs	r4, r4, r5
 8001174:	10a4      	asrs	r4, r4, #2
 8001176:	42a6      	cmp	r6, r4
 8001178:	d105      	bne.n	8001186 <__libc_init_array+0x2e>
 800117a:	bd70      	pop	{r4, r5, r6, pc}
 800117c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001180:	4798      	blx	r3
 8001182:	3601      	adds	r6, #1
 8001184:	e7ee      	b.n	8001164 <__libc_init_array+0xc>
 8001186:	f855 3b04 	ldr.w	r3, [r5], #4
 800118a:	4798      	blx	r3
 800118c:	3601      	adds	r6, #1
 800118e:	e7f2      	b.n	8001176 <__libc_init_array+0x1e>
 8001190:	080011c8 	.word	0x080011c8
 8001194:	080011c8 	.word	0x080011c8
 8001198:	080011c8 	.word	0x080011c8
 800119c:	080011cc 	.word	0x080011cc

080011a0 <_init>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	bf00      	nop
 80011a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a6:	bc08      	pop	{r3}
 80011a8:	469e      	mov	lr, r3
 80011aa:	4770      	bx	lr

080011ac <_fini>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr
